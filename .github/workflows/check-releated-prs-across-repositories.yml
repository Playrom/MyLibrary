name: Check All Related PRs Status Across Repositories

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      pr_body:
        description: "The body of the pull request"
        required: true  # Make sure the pr_body is passed when manually triggered

jobs:
  check-related-prs:
    runs-on: ubuntu-latest

    steps:
      - name: Check if event is a pull request or dispatch
        id: check_event
        run: |
          # Check if the event is pull_request or workflow_dispatch
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "This is a pull request event."
            PR_BODY="${{ github.event.pull_request.body }}"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "This is a workflow dispatch event."
            PR_BODY="${{ github.event.inputs.pr_body }}"
          fi

          if [ -z "$PR_BODY" ]; then
            echo "No PR body provided. Exiting..."
            exit 1
          fi

          # Sanitize the PR_BODY to remove problematic characters like newlines
          SANITIZED_PR_BODY=$(echo "$PR_BODY" | tr -d '\n' | tr -d '\r')

          # Set PR_BODY as output to use in subsequent steps
          echo "pr_body=$SANITIZED_PR_BODY" >> $GITHUB_OUTPUT   # Write it to the output file
          echo "PR Body: $SANITIZED_PR_BODY"

      - name: Start - Extract Related PRs from Main PR Body
        id: extract_related_prs
        if: ${{ success() && steps.check_event.outcome == 'success' }}  # Only run if the previous step was successful
        run: |
          # Here you use the GitHub Action output in a bash script
          PR_BODY="${{ steps.check_event.outputs.pr_body }}"  # Correctly use the output from the previous step
          echo "PR Body From Previous Step: $PR_BODY"
          
          # Extract related PR URLs from the PR body.
          RELATED_PRS=$(echo "$PR_BODY" | grep -Eo 'https://github.com/[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+/pull/[0-9]+' | tr '\n' ' ')

          if [ -z "$RELATED_PRS" ]; then
            echo "No related PRs found in the PR body. Assuming no dependencies."
            echo "Marking all as merged since no PRs found."
            echo "all_merged=true" >> $GITHUB_ENV
            exit 0
          fi

          echo "Related PRs found: $RELATED_PRS"
          # Set output properly using the $GITHUB_OUTPUT file
          echo "related_prs=$RELATED_PRS" >> $GITHUB_OUTPUT  # Properly sets output for later use
          echo "Output set: Related PRs = $RELATED_PRS"

      - name: Print Extracted PRs for Debugging
        if: ${{ success() && steps.extract_related_prs.outcome == 'success' }}  # Only run if extraction was successful
        run: |
          echo "Debugging: Printing extracted related PRs."
          echo "Related PRs: ${{ steps.extract_related_prs.outputs.related_prs }}"

      - name: Start - Checking Status of Each Related PR
        if: ${{ success() && steps.extract_related_prs.outcome == 'success' }}  # Only run if the previous steps were successful
        run: |
          echo "Step 2: Checking the merge status of each related PR..."

      - name: Check Status of Each Related PR
        id: check_related_prs
        if: ${{ success() && steps.extract_related_prs.outcome == 'success' }}  # Only run if related PRs were found
        run: |
          # Initialize flag to track if all related PRs are merged.
          ALL_MERGED=true
          echo "Processing each related PR..."

          # Loop through each related PR URL extracted in the first step.
          for PR_URL in ${{ steps.extract_related_prs.outputs.related_prs }}; do
            echo "Checking status for PR: $PR_URL"

            # Extract the PR number and repository name from the URL.
            PR_NUMBER=$(basename "$PR_URL")
            REPO_FULL_NAME=$(echo "$PR_URL" | sed 's|https://github.com/||' | sed 's|/pull/.*||')

            echo "PR Number: $PR_NUMBER"
            echo "Repository: $REPO_FULL_NAME"

            # Fetch the PR status via the GitHub API.
            echo "Fetching merge status from GitHub API..."
            PR_STATUS=$(curl -H "Authorization: Bearer ${{ secrets.USER_ACTION_TOKEN }}" \
              "https://api.github.com/repos/$REPO_FULL_NAME/pulls/$PR_NUMBER" | jq -r '.merged')

            # Print the fetched PR status.
            echo "PR Merge Status: $PR_STATUS"

            # Check if the PR is merged or not.
            if [ "$PR_STATUS" != "true" ]; then
              ALL_MERGED=false
              echo "PR #$PR_NUMBER in repository $REPO_FULL_NAME is NOT merged."
            else
              echo "PR #$PR_NUMBER in repository $REPO_FULL_NAME is merged."
            fi
          done

          # Fail the job if any PR is not merged.
          if [ "$ALL_MERGED" != "true" ]; then
            echo "Not all related PRs are merged. Failing the check."
            exit 1
          else
            echo "All related PRs are merged. Success."
          fi

      - name: Final - Print Merge Status of All PRs
        if: ${{ success() && steps.check_related_prs.outcome == 'success' }}  # Only run if all checks were successful
        run: |
          echo "Step 3: All related PRs have been successfully checked."
